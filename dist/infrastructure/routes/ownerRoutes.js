"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const multer_1 = __importDefault(require("multer"));
const ownerUseCase_1 = __importDefault(require("../../usecases/ownerUseCase"));
const HashingService_1 = __importDefault(require("../utils/HashingService"));
const ownerSchema_1 = __importDefault(require("../model/ownerSchema"));
const ownerRepository_1 = __importDefault(require("../../adapters/repository/ownerRepository"));
const ownerController_1 = require("../../adapters/controller/ownerController");
const otpSchema_1 = __importDefault(require("../model/otpSchema"));
const otpService_1 = __importDefault(require("../utils/otpService"));
const jwtService_1 = __importDefault(require("../utils/jwtService"));
const workspaceController_1 = require("../../adapters/controller/workspaceController");
const workspaceRepository_1 = __importDefault(require("../../adapters/repository/workspaceRepository"));
const workspaceUseCase_1 = __importDefault(require("../../usecases/workspaceUseCase"));
const workspaceSchema_1 = __importDefault(require("../model/workspaceSchema"));
const ownerAuth_1 = __importDefault(require("../middleware/ownerAuth"));
const bookingRepository_1 = __importDefault(require("../../adapters/repository/bookingRepository"));
const bookingSchema_1 = __importDefault(require("../model/bookingSchema"));
const bookingUseCase_1 = __importDefault(require("../../usecases/bookingUseCase"));
const userRepository_1 = __importDefault(require("../../adapters/repository/userRepository"));
const userSchema_1 = __importDefault(require("../model/userSchema"));
const bookingController_1 = require("../../adapters/controller/bookingController");
const savedWorkspaceSchema_1 = __importDefault(require("../model/savedWorkspaceSchema"));
const reviewSchema_1 = __importDefault(require("../model/reviewSchema"));
const reviewRepository_1 = __importDefault(require("../../adapters/repository/reviewRepository"));
const walletRepository_1 = __importDefault(require("../../adapters/repository/walletRepository"));
const walletSchema_1 = __importDefault(require("../model/walletSchema"));
const reviewUseCase_1 = __importDefault(require("../../usecases/reviewUseCase"));
const reviewController_1 = require("../../adapters/controller/reviewController");
const ownerRouter = express_1.default.Router();
const upload = (0, multer_1.default)();
const hashingService = new HashingService_1.default();
const otpService = new otpService_1.default();
const jwtService = new jwtService_1.default();
const OwnerRepository = new ownerRepository_1.default(ownerSchema_1.default, otpSchema_1.default, workspaceSchema_1.default, bookingSchema_1.default);
const BookingRepository = new bookingRepository_1.default(bookingSchema_1.default, workspaceSchema_1.default, savedWorkspaceSchema_1.default, reviewSchema_1.default);
const UserRepository = new userRepository_1.default(userSchema_1.default, otpSchema_1.default, workspaceSchema_1.default, savedWorkspaceSchema_1.default, reviewSchema_1.default);
const WorkspaceRepository = new workspaceRepository_1.default(workspaceSchema_1.default, savedWorkspaceSchema_1.default);
const ReviewRepository = new reviewRepository_1.default(reviewSchema_1.default, bookingSchema_1.default, workspaceSchema_1.default);
const WalletRepository = new walletRepository_1.default(walletSchema_1.default);
const OwnerUseCase = new ownerUseCase_1.default(OwnerRepository, hashingService, otpService, jwtService);
const WorkspaceUseCase = new workspaceUseCase_1.default(WorkspaceRepository, OwnerRepository);
const BookingUseCase = new bookingUseCase_1.default(BookingRepository, WorkspaceRepository, UserRepository, ReviewRepository, WalletRepository);
const ReviewUseCase = new reviewUseCase_1.default(ReviewRepository);
const OwnerController = new ownerController_1.ownerController(OwnerUseCase);
const WorkspaceController = new workspaceController_1.workspaceController(WorkspaceUseCase);
const BookingController = new bookingController_1.bookingController(BookingUseCase);
const ReviewController = new reviewController_1.reviewController(ReviewUseCase);
ownerRouter.post('/register', OwnerController.register);
ownerRouter.post('/verifyOtp', OwnerController.verifyOtp);
ownerRouter.post('/resendOtp', OwnerController.resendOtp);
ownerRouter.post('/', OwnerController.login);
ownerRouter.post('/logout', OwnerController.logout);
// dashboard
ownerRouter.get('/dashboardData', ownerAuth_1.default, OwnerController.getDashboardData);
// workspace management 
ownerRouter.get('/listWorkspaces', ownerAuth_1.default, WorkspaceController.listWorkspaces);
ownerRouter.post('/addWorkspace', ownerAuth_1.default, upload.array('images'), WorkspaceController.addWorkspace);
ownerRouter.get("/viewDetails", ownerAuth_1.default, WorkspaceController.workspaceDetails);
ownerRouter.delete('/deleteWorkspace', ownerAuth_1.default, WorkspaceController.deleteWorkspace);
ownerRouter.put('/editWorkspace', ownerAuth_1.default, upload.array('images'), WorkspaceController.editWorkspace);
// booking management
ownerRouter.get('/listBookings', ownerAuth_1.default, BookingController.listBookings);
ownerRouter.get('/bookingViewDetails', ownerAuth_1.default, BookingController.getBookingDetailsOwner);
ownerRouter.get('/getAllReviews', ownerAuth_1.default, ReviewController.getAllReviews);
exports.default = ownerRouter;
//# sourceMappingURL=ownerRoutes.js.map