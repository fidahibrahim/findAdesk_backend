"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userController_1 = require("../../adapters/controller/userController");
const userUseCase_1 = __importDefault(require("../../usecases/userUseCase"));
const userRepository_1 = __importDefault(require("../../adapters/repository/userRepository"));
const userSchema_1 = __importDefault(require("../model/userSchema"));
const HashingService_1 = __importDefault(require("../utils/HashingService"));
const otpSchema_1 = __importDefault(require("../model/otpSchema"));
const otpService_1 = __importDefault(require("../utils/otpService"));
const jwtService_1 = __importDefault(require("../utils/jwtService"));
const userAuth_1 = __importDefault(require("../middleware/userAuth"));
const workspaceSchema_1 = __importDefault(require("../model/workspaceSchema"));
const multer_1 = __importDefault(require("multer"));
const bookingRepository_1 = __importDefault(require("../../adapters/repository/bookingRepository"));
const bookingSchema_1 = __importDefault(require("../model/bookingSchema"));
const bookingUseCase_1 = __importDefault(require("../../usecases/bookingUseCase"));
const bookingController_1 = require("../../adapters/controller/bookingController");
const workspaceRepository_1 = __importDefault(require("../../adapters/repository/workspaceRepository"));
const savedWorkspaceSchema_1 = __importDefault(require("../model/savedWorkspaceSchema"));
const reviewRepository_1 = __importDefault(require("../../adapters/repository/reviewRepository"));
const reviewUseCase_1 = __importDefault(require("../../usecases/reviewUseCase"));
const reviewController_1 = require("../../adapters/controller/reviewController");
const reviewSchema_1 = __importDefault(require("../model/reviewSchema"));
const walletRepository_1 = __importDefault(require("../../adapters/repository/walletRepository"));
const walletSchema_1 = __importDefault(require("../model/walletSchema"));
const walletUseCase_1 = __importDefault(require("../../usecases/walletUseCase"));
const walletController_1 = require("../../adapters/controller/walletController");
const userRouter = express_1.default.Router();
const upload = (0, multer_1.default)();
const hashingService = new HashingService_1.default();
const otpService = new otpService_1.default();
const jwtService = new jwtService_1.default();
const UserRepository = new userRepository_1.default(userSchema_1.default, otpSchema_1.default, workspaceSchema_1.default, savedWorkspaceSchema_1.default, reviewSchema_1.default);
const BookingRepository = new bookingRepository_1.default(bookingSchema_1.default, workspaceSchema_1.default, savedWorkspaceSchema_1.default, reviewSchema_1.default);
const WorkspaceRepository = new workspaceRepository_1.default(workspaceSchema_1.default, savedWorkspaceSchema_1.default);
const ReviewRepository = new reviewRepository_1.default(reviewSchema_1.default, bookingSchema_1.default, workspaceSchema_1.default);
const WalletRepository = new walletRepository_1.default(walletSchema_1.default);
const UserUseCase = new userUseCase_1.default(UserRepository, BookingRepository, WorkspaceRepository, hashingService, otpService, jwtService);
const BookingUseCase = new bookingUseCase_1.default(BookingRepository, WorkspaceRepository, UserRepository, ReviewRepository, WalletRepository);
const ReviewUseCase = new reviewUseCase_1.default(ReviewRepository);
const WalletUseCase = new walletUseCase_1.default(WalletRepository, BookingRepository);
const userController = new userController_1.UserController(UserUseCase);
const BookingController = new bookingController_1.bookingController(BookingUseCase);
const ReviewController = new reviewController_1.reviewController(ReviewUseCase);
const WalletController = new walletController_1.walletController(WalletUseCase);
// user authentication
userRouter.post('/register', userController.register);
userRouter.post('/verifyOtp', userController.verifyOtp);
userRouter.post('/resendOtp', userController.resendOtp);
userRouter.post('/login', userController.login);
userRouter.post('/logout', userController.logout);
userRouter.post('/googleLogin', userController.googleLogin);
userRouter.post('/forgotPassword', userController.forgotPassword);
userRouter.post('/changePassword', userController.changePassword);
userRouter.post('/contactUs', userController.contactService);
userRouter.get('/getProfile', userAuth_1.default, userController.getProfile);
userRouter.put('/editProfile', userAuth_1.default, upload.single('image'), userController.editProfile);
userRouter.post('/profile/resetPassword', userAuth_1.default, userController.resetPassword);
userRouter.get('/bookingHistory', userAuth_1.default, userController.getBookingHistory);
userRouter.get('/fetchBookingDetails', userAuth_1.default, BookingController.fetchBookingDetails);
userRouter.get('/recents', userController.getRecentWorkspaces);
userRouter.post('/searchWorkspaces', userAuth_1.default, userController.filterWorkspaces);
userRouter.get('/workspaceDetails', userAuth_1.default, userController.workspaceDetails);
userRouter.post('/checkAvailability', userAuth_1.default, BookingController.checkAvailability);
userRouter.post('/pendingBookings', userAuth_1.default, BookingController.createBooking);
userRouter.get("/bookings/details", userAuth_1.default, BookingController.getBookingDetails);
userRouter.post('/bookings/createStripeSession', BookingController.createStripeSession);
userRouter.post('/webhook', express_1.default.raw({ type: "application/json" }), BookingController.stripeWebhook);
userRouter.get('/bookingConfirmDetails', userAuth_1.default, BookingController.bookingConfirmDetails);
userRouter.patch('/booking/cancel', userAuth_1.default, BookingController.cancelBooking);
userRouter.post('/saveWorkspace', userAuth_1.default, userController.saveWorkspace);
//Review
userRouter.post('/addReview', userAuth_1.default, ReviewController.addReview);
userRouter.get('/getReviews', userAuth_1.default, ReviewController.getReviews);
userRouter.get('/wallet', userAuth_1.default, WalletController.getWallet);
userRouter.post('/bookings/walletPayment', userAuth_1.default, WalletController.processWalletPayment);
userRouter.post('/subscription/createStripeSession', userAuth_1.default, userController.addSubscription);
userRouter.post('/verifySubscription/:sessionId', userAuth_1.default, userController.verifySubscription);
exports.default = userRouter;
//# sourceMappingURL=userRoutes.js.map